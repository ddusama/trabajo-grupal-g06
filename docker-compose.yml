version: '3'
services:
  proxy:
    image: traefik:v2.9.6
    command: --api.insecure=true --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    expose:
      - 80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  neo4j:
    image: neo4j
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/12345678
  postgres-sql:
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: distribuida
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
  authors-service:
    image: jaimesalvador/app-authors:cuascota-1.0.0
    expose:
      - 8000
    deploy:
      replicas: 1
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=distribuida
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres-sql
      - DB_PORT=5432
    depends_on:
      postgres-sql:
        condition: service_healthy
    labels:
      - "traefik.http.routers.authors.rule=PathPrefix(`/app2`)"
      - "traefik.http.middlewares.authors.stripprefix.prefixes=/app2"
      - "traefik.http.routers.authors.middlewares=authors"
  book-service:
    image: jaimesalvador/app-books:cuascota-1.0.0
    expose:
      - 9000
    deploy:
      replicas: 1
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=12345678
      - NEO4J_DATABASE=neo4j
      - SERVER_PORT=9000
    labels:
      - "traefik.http.routers.books.rule=PathPrefix(`/app1`)"
      - "traefik.http.middlewares.books.stripprefix.prefixes=/app1"
      - "traefik.http.routers.books.middlewares=books"
    depends_on:
      - neo4j
    


